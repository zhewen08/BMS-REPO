\section{Implementation}

In this section, we discuss the implementation details of the neo4j based REPO prototype.

\subsection{Interact with Neo4j}

%use cypher statement to do insertion/deletion/lookup
Neo4j is a world-leading graph database with full ACID support. Neo4j comes natively in Java and is built on top of native graph storage. Therefore the logic structure of neo4j nodes and relations is reflected in the underlying storage exactly the same way.

We chose py2neo, a Python binding for neo4j database, to implement our REPO prototype. py2neo interacts with neo4j server with the Cypher query language, which to neo4j is as SQL to relational database, via neo4j server's RESTful API.

Cypher query language provides readable and flexible interaction with neo4j. We introduce the 4 most frequently involved Cypher clauses in our prototype as follows:
\begin{itemize}
    \item START. Every query describes a pattern, and in that pattern one can have multiple starting points. A starting point is a relationship or a node where a pattern is anchored. We use the START statement to describe the starting point of the pattern we search for such that the unnecessary patterns (with the incorrect starting point can be avoided). \emph{START n=node(\{ids\})} identifies the starting point by the internal node id of neo4j.
    \item CREATE UNIQUE. CREATE UNIQUE is in the middle of MATCH and CREATE: it will match what it can, and create what is missing. CREATE UNIQUE will always make the least change possible to the graph: if it can use parts of the existing graph, it will. \emph{CREATE UNIQUE \{pattern\}} creates the unique pattern described by \{pattern\}.
    \item MATCH. MATCH is the primary way of getting data from the database into the current set of bindings. The MATCH clause allows you to specify the patterns Cypher will search for in the database. \emph{MATCH \{pattern\}} searches the graph database for the pattern described by \{pattern\}.
    \item DELETE. Deleting graph elements, i.e. nodes and relationships, is done with DELETE. We first use the MATCH clause to search the graph database, and then use the DELETE clause to delete the matching patterns. Note that if any end node of a relation is removed, this relation should also be removed. \emph{MATCH p=\{pattern\} DELETE p} deletes all patterns described by \{pattern\}.
\end{itemize}

In the following subsections, we describe in detail how we implement content object lookup, insertion, and deletion with above clauses.

\subsection{Content Object Lookup}



\subsection{Content Object Insertion}

\subsection{Content Object Deletion}